#  WeirdData Copyright (c) 2020.
#  Author: Rohit Suratekar
#  Web: https://github.com/WeirdData/GeoAnalysis
#
#  All the countries mentioned in the Big Bang Theory
#
#  Country names were found from BBT subtitle files and then saved in
#  "bbt.countries" file.

import re

import cartopy.crs as crs
import cartopy.feature as cfeature
import cartopy.io.shapereader as shpreader
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from SecretColors import Palette
from SecretColors.cmaps import BrewerMap
from mpl_toolkits.axes_grid1 import make_axes_locatable

p = Palette("brewer")
colors = [
    p.blue(shade=30),
    p.blue(shade=40),
    p.blue(shade=50),
    p.blue(shade=60),
    p.green(shade=30),
    p.green(shade=40),
    p.green(shade=50),
    p.red(shade=30),
    p.red(shade=40),
    p.red(shade=50),
    p.purple(shade=30),
    p.purple(shade=50),
    p.purple(shade=50),
    p.purple(shade=50),
    p.purple(shade=50),
    p.purple(shade=60),
    p.purple(shade=60),
    p.purple(shade=70),
    p.purple(shade=70),
]

cm = BrewerMap(matplotlib).from_list(colors)

# If you use following names in regex, you will get lot of random words in
# your search. Hence I have just used perfect match for these
complex_pattern = ["chad", "oman", "cuba", "france", "mali", "peru"]


def country_count(name, text):
    if name not in complex_pattern:
        counts = re.findall(f"\\b{name}?\\w+\\b", text)
    else:
        counts = re.findall(f"\\b{name}\\b", text)

    # Lot of times, cast used America instead US
    if name == "united states":
        counts2 = re.findall(f"\\bamerica?\\w+\\b", text)
        counts.extend(counts2)
    return len(counts)


def generate_data():
    # bbt.countries file was generated by just searching substrings,
    # then some manual data cleaning was done
    df = pd.read_csv("data/bbt.countries")
    data = dict(zip(df["code"], df["name"]))
    # Add known country variant
    data["GB"] = "british"

    # Test.txt is file containing all the text gathered from subtitles
    with open("test.txt") as f:
        text = f.readlines()

    text = " ".join(text)

    # File which has mapping of 2 letter country code to 3 letters
    cc_codes = pd.read_csv("data/codes.csv")
    cc_codes = dict(zip(cc_codes["code2"], cc_codes["code3"]))

    # Regenerate bb.countries with correct count data
    with open("bbt.countries", "w") as f:
        print("code,name,count", file=f)
        for code, name in data.items():
            ct = country_count(name, text)
            print(f"{cc_codes[code.strip()]},{name},{ct}", file=f)


def draw_map():
    # Generate counts before drawing the map
    df = pd.read_csv("data/bbt.countries")
    data = dict(zip(df["code"], df["name"]))
    counts = dict(zip(df["code"], df["count"]))

    fig = plt.figure(figsize=(13, 9))
    ax = plt.subplot(111, projection=crs.Miller())

    shpfilename = shpreader.natural_earth(resolution='110m',
                                          category='cultural',
                                          name='admin_0_countries')
    reader = shpreader.Reader(shpfilename)
    countries = reader.records()
    # ax.add_feature(cfeature.OCEAN, color=p.blue(shade=30))
    ax.add_feature(cfeature.BORDERS, alpha=0.5)
    ax.add_feature(cfeature.COASTLINE, alpha=0.5)
    max_count = max(counts.values())
    counts = {x: counts[x] / max_count for x in counts}
    for country in countries:
        ct = country.attributes['ADM0_A3']
        if ct in data:
            ax.add_geometries([country.geometry],
                              crs.PlateCarree(),
                              fc=cm(counts[ct]),
                              alpha=0.8)

    divider = make_axes_locatable(ax)
    ax_cb = divider.new_horizontal(size="3%", pad=0.2, axes_class=plt.Axes)
    fig.add_axes(ax_cb)

    sm = plt.cm.ScalarMappable(cmap=cm, norm=plt.Normalize(0, 1))
    sm._A = []
    cb = plt.colorbar(sm, cax=ax_cb)
    vls = [0,
           counts['MEX'],
           counts['RUS'],
           counts['CHN'],
           counts['USA'],
           1]

    cb.set_ticks(vls)
    cb.set_ticklabels([str(round(x * max_count + 1)) for x in vls])

    ax.set_title("Number of times country is referred in the "
                 "Big Bang Theory",
                 fontsize=12)
    plt.savefig("plot.png", dpi=300)
    plt.show()


def run():
    draw_map()
